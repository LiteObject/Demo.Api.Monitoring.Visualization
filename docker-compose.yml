version: '3.4'

services: 
  demo.api.weather.backend:
    image: ${DOCKER_REGISTRY-}demoapimonitoringvisualizationbackend
    container_name: demo-api-weather-backend
    build:
      context: .
      dockerfile: Demo.Weather.Backend.Api/Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=https://+:443;http://+:80
      - ASPNETCORE_HTTPS_PORT=5003
      - ASPNETCORE_Kestrel__Certificates__Default__Password=SECRETPASSWORD
      - ASPNETCORE_Kestrel__Certificates__Default__Path=/https/aspnetapp.pfx
    ports:      
      - 5006:80
      - 5007:443
    volumes:
      - ~/.aspnet/https:/https:ro

  demo.api.weather:
    image: ${DOCKER_REGISTRY-}demoapimonitoringvisualization
    container_name: demo-api-weather
    build:
      context: .
      dockerfile: Demo.Weather.Api/Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=https://+:443;http://+:80
      - ASPNETCORE_HTTPS_PORT=5003
      - ASPNETCORE_Kestrel__Certificates__Default__Password=SECRETPASSWORD
      - ASPNETCORE_Kestrel__Certificates__Default__Path=/https/aspnetapp.pfx
    ports:      
      - 5004:80
      - 5003:443
    volumes:
      - ~/.aspnet/https:/https:ro
      #- ${APPDATA}/Microsoft/UserSecrets:/root/.microsoft/usersecrets:ro
      #- ${APPDATA}/ASP.NET/Https:/root/.aspnet/https:ro
    depends_on:
      - demo.api.weather.backend
      
  prometheus:
    image: ubuntu/prometheus
    container_name: dev_prometheus    
    ports:
      - "30090:9090"
    environment:
      - TZ=UTC
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    depends_on:
      - demo.api.weather
      
  grafana:
    image: grafana/grafana
    container_name: dev_grafana  
    environment:
      - GF_SECURITY_ADMIN_USER="admin"
      - GF_SECURITY_ADMIN_PASSWORD="password"
    ports:
      - "30091:3000"
    volumes:
      - ./grafana-data/data:/var/lib/grafana
    depends_on:
      - demo.api.weather

  zipkin.storage:
    image: openzipkin/zipkin-mysql
    container_name: mysql
    # Uncomment to expose the storage port for testing
    ports:
      - 3306:3306

  # The zipkin process services the UI, and also exposes a POST endpoint that
  # instrumentation can send trace data to. Scribe is disabled by default.
  zipkin:
    image: openzipkin/zipkin
    container_name: zipkin
    # Environment settings are defined here https://github.com/openzipkin/zipkin/blob/master/zipkin-server/README.md#environment-variables
    environment:
      - STORAGE_TYPE=mysql
      # Point the zipkin at the storage backend
      - MYSQL_HOST=mysql
      # Uncomment to enable scribe
      # - SCRIBE_ENABLED=true
      # Uncomment to enable self-tracing
      # - SELF_TRACING_ENABLED=true
      # Uncomment to enable debug logging
      # - JAVA_OPTS=-Dlogging.level.zipkin2=DEBUG
    ports:
      # Port used for the Zipkin UI and HTTP Api
      - 9411:9411
      # Uncomment if you set SCRIBE_ENABLED=true
      # - 9410:9410
    depends_on:
      - zipkin.storage

  # Adds a cron to process spans since midnight every hour, and all spans each day
  # This data is served by http://192.168.99.100:8080/dependency
  #
  # For more details, see https://github.com/openzipkin/docker-zipkin-dependencies
  dependencies:
    image: openzipkin/zipkin-dependencies
    container_name: dependencies
    entrypoint: crond -f
    environment:
      - STORAGE_TYPE=mysql
      - MYSQL_HOST=mysql
      # Add the baked-in username and password for the zipkin-mysql image
      - MYSQL_USER=zipkin
      - MYSQL_PASS=zipkin
      # Uncomment to see dependency processing logs
      # - ZIPKIN_LOG_LEVEL=DEBUG
      # Uncomment to adjust memory used by the dependencies job
      # - JAVA_OPTS=-verbose:gc -Xms1G -Xmx1G
    depends_on:
      - zipkin.storage

  seq-demo-logging:
    image: datalust/seq:latest
    container_name: "seq-demo-logging"
    restart: unless-stopped
    ports:
      - 5380:80   # UI
      - 5341:5341 # Data ingest
    environment:      
      - ACCEPT_EULA=Y